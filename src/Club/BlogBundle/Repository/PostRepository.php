<?php

namespace Club\BlogBundle\Repository;

use Club\BlogBundle\Entity\Category;
use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    
    public function getQueryBuilder(array $params = array())
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p', 'c', 'com', 'a')
            ->leftJoin('p.category', 'c')
            ->leftJoin('p.comments', 'com')
            ->orderBy('p.publishedDate')
            ->leftJoin('p.author', 'a');

        if (!empty($params['status'])) {
            if('published' == $params['status']){
                $qb->where('p.publishedDate <= :currentDate AND p.publishedDate is NOT NULL')
                    ->setParameter('currentDate', new \DateTime());

            }elseif('unpublished' == $params['status']){
                $qb->where('p.publishedDate > :currDate OR p.publishedDate IS NULL')
                    ->setParameter('currDate', new \DateTime());
            }
        }

        if (!empty($params['orderBy'])) {
            $orderDir = !empty($params['orderDir']) ? $params['orderDir'] : NULL;
            $qb->orderBy($params['orderBy'], $orderDir);
        }

        if (!empty($params['categorySlug'])) {
            $qb->andWhere('c.slug = :categorySlug')
                ->setParameter('categorySlug', $params['categorySlug']);
        }

        if (!empty($params['categoryId'])) {
            if (-1 == $params['categoryId']) {
                $qb->andWhere($qb->expr()->isNull('p.category'));
            } elseif (-2 == $params['categoryId']) {
                $qb->andWhere('0 = 0');
            } else {
                $qb->andWhere('c.id = :categoryId')
                    ->setParameter('categoryId', $params['categoryId']);

            }
        }

        if (!empty($params['username'])) {
            $qb->andWhere('p.author = :username')
                ->setParameter('username', $params['username']);
        }

        if (!empty($params['search'])) {
            $searchParam = '%' . $params['search'] . '%';
            $qb->andWhere('p.title LIKE :searchParam OR p.content LIKE :searchParam')
                ->setParameter('searchParam', $searchParam);
        }

        if (!empty($params['titleLike'])) {
            $titleLike = '%' . $params['titleLike'] . '%';
            $qb->andWhere('p.title LIKE :titleLike')
                ->setParameter('titleLike', $titleLike);
        }

        return $qb;
    }

    public function getComments($slug)
    {
        $qb = $this->createQueryBuilder('com')
            ->select('com', 'a')
            ->leftJoin('com.author', 'a')
            ->where('com.post');
        $qb->andWhere('p.slug = :slug')
            ->setParameter('slug', $slug);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $limit
     * @return mixed
     */
    public function getLatestNews($limit)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->orderBy('p.createDate', 'DESC')
            ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    public function createQueryBuilderForCategory(Category $category)
    {
        return $this->createQueryBuilder('post')
            ->andWhere('post.category = :category')
            ->setParameter('category', $category);
    }

    public function findAllQueryBuilder($filter = '')
    {
        $qb = $this->createQueryBuilder('post')
            ->select('post')
            ->leftJoin('post.comments', 'comments');

        if ($filter) {
            $qb->andWhere('post.title LIKE :filter')
                ->setParameter('filter', '%' . $filter . '%');
        }

        return $qb;
    }
}
