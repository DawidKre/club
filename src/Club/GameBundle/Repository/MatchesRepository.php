<?php

namespace Club\GameBundle\Repository;

/**
 * MatchesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MatchesRepository extends \Doctrine\ORM\EntityRepository
{

    public function getLastRound()
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m')
            ->leftJoin('m.round', 'round')
            ->where('m.date < CURRENT_TIMESTAMP()')
            ->orderBy('m.date', 'DESC')
            ->setMaxResults('1');
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getNextRound()
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m')
            ->leftJoin('m.round', 'round')
            ->where('m.date > CURRENT_TIMESTAMP()')
            ->orderBy('m.date', 'DESC')
            ->setMaxResults('1');
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getAllRounds()
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m')
            ->leftJoin('m.season', 'season')
            ->groupBy('m.round');
        return $qb->getQuery()->getResult();
    }

    public function getNextRoundMatches()
    {
        if ($this->getNextRound() != null) {
            $nextRound = $this->getNextRound()->getRound();
        } else {
            $nextRound = null;
        }

        $qb = $this->createQueryBuilder('m')
            ->select('teamHome.name AS teamHomeName', 'teamAway.name AS teamAwayName', 'm.score', 'm.date')
            ->leftJoin('m.teamAway', 'teamAway')
            ->leftJoin('m.teamHome', 'teamHome')
            ->where('m.round =:round')
            ->setParameter('round', $nextRound);

        return $qb->getQuery()->getArrayResult();
    }

    public function getLastRoundMatches()
    {
        if ($this->getLastRound() != null) {
            $lastRound = $this->getLastRound()->getRound();
        } else {
            $lastRound = null;
        }
        $qb = $this->createQueryBuilder('m')
            ->select('teamHome.name AS teamHomeName', 'teamAway.name AS teamAwayName', 'm.score', 'm.date')
            ->leftJoin('m.teamAway', 'teamAway')
            ->leftJoin('m.teamHome', 'teamHome')
            ->where('m.round =:round')
            ->setParameter('round', $lastRound);

        return $qb->getQuery()->getArrayResult();
    }

    public function createQueryBuilderForRound($id)
    {
        return $this->createQueryBuilder('matches')
            ->leftJoin('matches.round', 'round')
            ->andWhere('round.id = :id')
            ->setParameter('id', $id)
            ->getQuery()->getArrayResult();
    }

    public function createQueryBuilderForSquad($id)
    {
        return $this->createQueryBuilder('matches')
            ->leftJoin('matches.squad', 'squad')
            ->andWhere('matches.id = :id')
            ->setParameter('id', $id)
            ->getQuery()->getArrayResult();
    }
}
